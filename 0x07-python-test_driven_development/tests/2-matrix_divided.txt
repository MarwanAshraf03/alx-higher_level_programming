``2-matrix_divided`` module
========================

Using ``matrix_divided``
---------------------

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix2 = []
>>> matrix3 = [[], []]
>>> matrix4 = [[1, 2, 3], []]
>>> matrix4 = [[1, 2, 3], []]

The normal code
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

div not integer nor float
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], "h")
Traceback (most recent call last):
...
TypeError: div must be a number

div equals 0
>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

The matrix is a flat empty list
>>> matrix_divided([], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

The matrix is a flat not empty list
>>> matrix_divided([1, 2], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

The matrix is a nested empty list
>>> matrix_divided([[]], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

The matrix is a nested not empty list
>>> matrix_divided([[1, 2, 3]], 3)
[[0.33, 0.67, 1.0]]

The matrix is a nested list with integer in main list
>>> matrix_divided([[1, 2, 3], 2], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

The matrix is a nested list with list of non int or float items in main list
>>> matrix_divided([[1, 2, 3], ['2']], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

The matrix is a nested list different row sizes
>>> matrix_divided([[1, 2, 3], [1, 3]], 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size
